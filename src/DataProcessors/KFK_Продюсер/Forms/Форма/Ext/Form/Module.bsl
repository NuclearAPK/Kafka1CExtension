&НаКлиенте
Перем editorJSON;     

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	Попытка     
		Объект.ВидПродюсера = 1;
		Элементы.ГруппаВидПродюсера.ТекущаяСтраница = Элементы.ГруппаПроизвольныйПродюсер;

		JSONHTML = УстановитьJSONEditor(); 
		
		Объект.ВидСтроковыхДанных = 1;
		Элементы.ГруппаВложенныхСтраницТиповДанных.ТекущаяСтраница = Элементы.ГруппаJSON; 
	Исключение
		Объект.ВидСтроковыхДанных = 0;
		Элементы.ВидСтроковыхДанных.Доступность = Ложь;
	КонецПопытки;           
	
	Если Параметры.Свойство("Продюсер") Тогда
		Объект.ВидПродюсера = 0;	       
		Объект.Продюсер = Параметры.Продюсер;  
		Элементы.ГруппаВидПродюсера.ТекущаяСтраница = Элементы.ГруппаКонкретныйПродюсер;
	КонецЕсли;
	
	КоличествоСообщений = 1;
	
	// если у нас всего 1 брокер - подставим его автоматом     
	Если НЕ ЗначениеЗаполнено(Объект.Брокер) Тогда
		КоллекцияБрокеров = ПолучитьКоллекциюБрокеров();
		Если КоллекцияБрокеров.Количество() = 1 Тогда
			Объект.Брокер = КоллекцияБрокеров[0];	 
			Элементы.Топик.СписокВыбора.ЗагрузитьЗначения(
				KFK_ИнтеграцияВызовСервера.ЗаполнитьСписокВыбораТопиков(Объект.Брокер).ВыгрузитьЗначения());
		КонецЕсли;    
	КонецЕсли; 
	
	АдресРеестраСхем = Константы.KFK_АдресРеестраСхем.Получить(); 	
	Элементы.AVRO.Видимость = ЗначениеЗаполнено(АдресРеестраСхем);

	Если ЗначениеЗаполнено(АдресРеестраСхем) Тогда    
		Пользователь = Константы.KFK_ПользовательРеестраСхем.Получить();
		Пароль = Константы.KFK_ПарольРеестраСхем.Получить();    

		ЗаполнитьИнформациюИзРеестраСхем();	    
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// TODO?
КонецПроцедуры

#КонецОбласти     

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьФайлыНажатие(Элемент)          
	
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановитьФайлыКПередачеЗавершение", ЭтотОбъект);  
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов("Выберите файлы", Истина, "*.*");

	НачатьПомещениеФайловНаСервер(ОповещениеОЗавершении, , , ПараметрыДиалога, УникальныйИдентификатор);   
	
КонецПроцедуры   

&НаКлиенте
Процедура УстановитьФайлыКПередачеЗавершение(ПомещенныеФайлы, Дополнительно) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда		
		Возврат;		
	КонецЕсли;      
	
	МассивАдресов = Новый Массив;    
	МассивИмен = Новый Массив;
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		ИмяФайла = ПомещенныйФайл.СсылкаНаФайл.Имя;		
		АдресФайла = ПомещенныйФайл.Адрес;
		МассивАдресов.Добавить(АдресФайла); 
		МассивИмен.Добавить(ИмяФайла);
	КонецЦикла;    
	
	СписокАдресов.ЗагрузитьЗначения(МассивАдресов);
	Элементы.ВыбратьФайлы.Заголовок = СтрСоединить(МассивИмен, ", ");
		
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)      
	
	ТекущаяСтраница = Элементы.ГруппаДвоичныеДанные;
	Если Объект.ВидДанных = 1 Тогда
		ТекущаяСтраница = Элементы.ГруппаСтрока;	
	КонецЕсли;
	Элементы.ГруппаВидовОтправляемыхДанных.ТекущаяСтраница = ТекущаяСтраница;  
	
КонецПроцедуры 

&НаСервере
Процедура ГенерироватьПроизвольныйКлючПриИзмененииНаСервере()  
	
	Элементы.Ключ.Доступность = НЕ Объект.ГенерироватьПроизвольныйКлюч; 
	Если Объект.ГенерироватьПроизвольныйКлюч Тогда
		Объект.Ключ = "";
	КонецЕсли;             
	
КонецПроцедуры

&НаКлиенте
Процедура ГенерироватьПроизвольныйКлючПриИзменении(Элемент)
	
	ГенерироватьПроизвольныйКлючПриИзмененииНаСервере();   
	
КонецПроцедуры

&НаКлиенте
Процедура JSONHTMLДокументСформирован(Элемент)

	Попытка
		editorJSON = Элементы.JSONHTML.Документ.defaultView.Init();
	Исключение
		Объект.ВидСтроковыхДанных = 0;
		Элементы.ВидСтроковыхДанных.Доступность = Ложь;		 
		Элементы.ГруппаВложенныхСтраницТиповДанных.ТекущаяСтраница = Элементы.ГруппаПроизвольнаяСтрока;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура JSONHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если НЕ ПолучитьЗначениеКоллекции(ДанныеСобытия, "Button.id")="onChange" Тогда
		Возврат;
	КонецЕсли;	
		
	JSON = editorJSON.getText();

КонецПроцедуры     

&НаКлиенте
Процедура ВидСтроковыхДанныхПриИзменении(Элемент)         
	
	Если Объект.ВидСтроковыхДанных = 0 Тогда
		Элементы.ГруппаВложенныхСтраницТиповДанных.ТекущаяСтраница = Элементы.ГруппаПроизвольнаяСтрока;	
	ИначеЕсли Объект.ВидСтроковыхДанных = 1 Тогда 
		Элементы.ГруппаВложенныхСтраницТиповДанных.ТекущаяСтраница = Элементы.ГруппаJSON;	
	КонецЕсли;        
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродюсераПриИзменении(Элемент)

	Если Объект.ВидПродюсера = 0 Тогда
		Элементы.ГруппаВидПродюсера.ТекущаяСтраница = Элементы.ГруппаКонкретныйПродюсер;	
	Иначе
		Элементы.ГруппаВидПродюсера.ТекущаяСтраница = Элементы.ГруппаПроизвольныйПродюсер;
	КонецЕсли;
	
КонецПроцедуры        

&НаКлиенте
Процедура БрокерПриИзменении(Элемент)
	Элементы.Топик.СписокВыбора.ЗагрузитьЗначения(
		KFK_ИнтеграцияВызовСервера.ЗаполнитьСписокВыбораТопиков(Объект.Брокер).ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура СубъектПриИзмененииНаСервере()    
	
	Аутентификация = Новый Структура("Пользователь, Пароль", Пользователь, Пароль);
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация); 
	ДополнительныеПараметры.Вставить("ПроверятьSSL", Ложь);
	
	Результат = КоннекторHTTP.GetJson(СтрШаблон("%1/subjects/%2/versions", АдресРеестраСхем, Субъект),
	   									Неопределено,
										ДополнительныеПараметры);
										
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Элементы.ВерсияСхемы.СписокВыбора.ЗагрузитьЗначения(Результат);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СубъектПриИзменении(Элемент)
	СубъектПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВерсияСхемыПриИзмененииНаСервере()    
	
	Если ЗначениеЗаполнено(Субъект) И ЗначениеЗаполнено(ВерсияСхемы) Тогда
		Аутентификация = Новый Структура("Пользователь, Пароль", Пользователь, Пароль);
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация); 
		ДополнительныеПараметры.Вставить("ПроверятьSSL", Ложь);
		
		Результат = КоннекторHTTP.GetJson(СтрШаблон("%1/subjects/%2/versions/%3", АдресРеестраСхем, Субъект, ВерсияСхемы),
		   									Неопределено,
											ДополнительныеПараметры);       
											
		Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
			ДанныеСхемы = Результат.Получить("schema");
			Если ЗначениеЗаполнено(ДанныеСхемы) Тогда
				СхемаAVRO = ДанныеСхемы;
				ИмяСхемы = СтрШаблон("%1_%2", СтрЗаменить(Результат.Получить("subject"), "-", "_"), Результат.Получить("version"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;      
										
КонецПроцедуры

&НаКлиенте
Процедура ВерсияСхемыПриИзменении(Элемент)
	
	ВерсияСхемыПриИзмененииНаСервере();  
	
	Если ЗначениеЗаполнено(СхемаAVRO) Тогда
		ПоказатьПредупреждение(,"Схема успешно получена");	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Опубликовать(Команда)    
	
	Если Объект.ВидПродюсера = 1 И НЕ ЗначениеЗаполнено(Объект.Топик) Тогда
		ПоказатьПредупреждение(, "Укажите топик!", 10, "Внимание!");
		Возврат;
	КонецЕсли;

	Если Объект.ВидДанных = 1 Тогда
		Если Объект.ВидСтроковыхДанных = 0 Тогда
			СообщениеСтрокой = ПроизвольныеДанныеСтрокой;
		ИначеЕсли Объект.ВидСтроковыхДанных = 1 Тогда
			СообщениеСтрокой = editorJSON.getText();
		КонецЕсли;              
	КонецЕсли;

	ОпубликоватьНаСервере();  
	
	ПоказатьПредупреждение(, "Сообщение было отправлено", , "Результат отправки");
	
КонецПроцедуры

&НаСервере
Процедура ОпубликоватьНаСервере()    
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;              
	
	ПараметрыОтправки = Новый Структура;    
	
	Если Объект.ГенерироватьПроизвольныйКлюч Тогда	
		ПараметрыОтправки.Вставить("Ключ", XMLСтрока(Новый УникальныйИдентификатор)); 
	ИначеЕсли ЗначениеЗаполнено(Объект.Ключ) Тогда
		ПараметрыОтправки.Вставить("Ключ", Объект.Ключ);	
	КонецЕсли;    	

	Если Объект.Заголовки.Количество() Тогда
		Заголовки = Новый Массив;
		Для каждого Заголовок_ Из Объект.Заголовки Цикл
			Заголовки.Добавить(СтрШаблон("%1,%2", Заголовок_.Ключ, Заголовок_.Значение));		
		КонецЦикла;  
		
		ПараметрыОтправки.Вставить("Заголовки", СтрСоединить(Заголовки, ";"));
	КонецЕсли;      
	
	ПараметрыОтправки.Вставить("Партиция", Объект.Партиция); 
	ПараметрыОтправки.Вставить("Синхронно", (Объект.СпособДоставки = 1));   	
	ПараметрыОтправки.Вставить("Параметры", Новый Соответствие);  
	ПараметрыОтправки.Вставить("КоличествоСообщений", КоличествоСообщений);    
	
	Если ЗначениеЗаполнено(СхемаAVRO) Тогда
		ПараметрыОтправки.Вставить("СхемаAVRO", Новый Структура("ИмяСхемы, Схема", ИмяСхемы, СхемаAVRO));   
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипСжатия) Тогда
		ПараметрыОтправки.Параметры.Вставить("compression.codec", Объект.ТипСжатия);	
	КонецЕсли;                      

	Если Объект.ВидПродюсера = 1 Тогда
		ДополнитьПараметрыОтправки(ПараметрыОтправки);	  	
	Иначе
		Для каждого Параметр Из Объект.Продюсер.ПараметрыПродюсера Цикл
			ПараметрыОтправки.Параметры.Вставить(СокрЛП(Параметр.Ключ), СокрЛП(Параметр.Значение));	
		КонецЦикла;
	КонецЕсли;  
			
	Если Объект.ВидДанных = 1 Тогда    
		
		Если НЕ ЗначениеЗаполнено(СообщениеСтрокой) Тогда
			ВызватьИсключение "Не заполнено сообщение к отправке";	
		КонецЕсли;
		
   		KFK_Интеграция.Опубликовать(?(Объект.ВидПродюсера = 0, Объект.Продюсер, Неопределено), СообщениеСтрокой, ПараметрыОтправки);	
	Иначе       
		МассивДвоичныхДанных = Новый Массив;
		
		Для каждого АдресФайла Из СписокАдресов Цикл
			МассивДвоичныхДанных.Добавить(ПолучитьИзВременногоХранилища(АдресФайла.Значение));	
		КонецЦикла;   
		
		KFK_Интеграция.Опубликовать(?(Объект.ВидПродюсера = 0, Объект.Продюсер, Неопределено), МассивДвоичныхДанных, ПараметрыОтправки);	
	КонецЕсли;           
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

Процедура ЗаполнитьИнформациюИзРеестраСхем()     
		
	Аутентификация = Новый Структура("Пользователь, Пароль", Пользователь, Пароль);
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация); 
	ДополнительныеПараметры.Вставить("ПроверятьSSL", Ложь);
	
	Результат = КоннекторHTTP.GetJson(СтрШаблон("%1/subjects", АдресРеестраСхем),
	   									Неопределено,
										ДополнительныеПараметры);
										
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Элементы.Субъект.СписокВыбора.ЗагрузитьЗначения(Результат);	
	КонецЕсли;
										
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюБрокеров()  
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	KFK_Брокеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.KFK_Брокеры КАК KFK_Брокеры
	|ГДЕ
	|	KFK_Брокеры.ПометкаУдаления = ЛОЖЬ");
	
	Результат = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыОтправки(ПараметрыОтправки)         
	
	Если НЕ ПараметрыОтправки.Свойство("КаталогЛогов") Тогда
		ПараметрыОтправки.Вставить("КаталогЛогов", "");	
	КонецЕсли;    
	
	Если НЕ ПараметрыОтправки.Свойство("Топики") Тогда
		ПараметрыОтправки.Вставить("Топики", KFK_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Топик));	
	КонецЕсли;         
	
	Если НЕ ПараметрыОтправки.Свойство("Брокеры") Тогда  
		ПараметрыОтправки.Вставить("Брокеры", KFK_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Брокер));		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьJSONEditor() Экспорт
	 
	РабочийКаталог = КаталогВременныхФайлов();
	КаталогКомпоненты = "EDIbotJSONEditor";
	КаталогНаДиске = Новый Файл(РабочийКаталог+КаталогКомпоненты); 
	
	Если НЕ КаталогНаДиске.Существует() Тогда				 
		Чтение = Новый ЧтениеДанных(ПолучитьОбщийМакет("KFK_EDIbotJSONEditor"));		
		Файл = Новый ЧтениеZipФайла(Чтение.ИсходныйПоток());
		Файл.ИзвлечьВсе(РабочийКаталог+КаталогКомпоненты);
	КонецЕсли;

	Возврат РабочийКаталог+КаталогКомпоненты+"\index.html"; 
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеКоллекцииБезВложенности(Знач Коллекция, ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) экспорт
	
	#Если Сервер Тогда
	Если ТипЗнч(Коллекция)=Тип("СтрокаДереваЗначений") Тогда
		
		ДеревоЗначений = Коллекция.Владелец();
		
		Если НЕ ДеревоЗначений.Колонки.Найти(ИмяСвойства)=Неопределено Тогда
			 Возврат Коллекция[ИмяСвойства];
		КонецЕсли; 
	КонецЕсли;
	#КонецЕсли
	
	Если (ТипЗнч(Коллекция)=Тип("Структура") ИЛИ ТипЗнч(Коллекция)=Тип("ФиксированнаяСтруктура")) И НЕ ПустаяСтрока(ИмяСвойства) Тогда
		
		Попытка
			Если Коллекция.Свойство(ИмяСвойства)  И (НЕ ЗначениеНеЗаполнено(Коллекция[ИмяСвойства]) ИЛИ ЗначениеПоУмолчанию=Неопределено)  Тогда			
				Возврат Коллекция[ИмяСвойства];
			КонецЕсли;
		Исключение
			Возврат  ЗначениеПоУмолчанию;
		КонецПопытки;
		
	#Если Клиент Тогда		
	ИначеЕсли ТипЗнч(Коллекция)=Тип("ВнешнийОбъект") Тогда
		
		Попытка
			Возврат Коллекция[ИмяСвойства];
		Исключение
			Возврат ЗначениеПоУмолчанию; 
		КонецПопытки;	
				
	ИначеЕсли ТипЗнч(Коллекция)=Тип("ДанныеФормыЭлементДерева") И НЕ ПустаяСтрока(ИмяСвойства) Тогда
		
		Если Коллекция.Свойство(ИмяСвойства)  И (НЕ ЗначениеНеЗаполнено(Коллекция[ИмяСвойства]) ИЛИ ЗначениеПоУмолчанию=Неопределено)  Тогда			
			Возврат Коллекция[ИмяСвойства];
		КонецЕсли;
	#КонецЕсли
	ИначеЕсли ТипЗнч(Коллекция)=Тип("Соответствие") И (НЕ ЗначениеНеЗаполнено(Коллекция.Получить(ИмяСвойства)) ИЛИ ЗначениеПоУмолчанию=Неопределено)   Тогда
		Возврат Коллекция.Получить(ИмяСвойства);
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

&НаКлиенте
Функция ПолучитьКоллекциюПоСвойству(Коллекция, Знач ИмяСвойства, ЗначениеПоУмолчанию=Неопределено) экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Коллекция",		Коллекция);
	Результат.Вставить("ИмяСвойства",	ИмяСвойства);
	
	Если НЕ ТипЗнч(ИмяСвойства)=Тип("Строка") Тогда
		Возврат Результат;
	КонецЕсли;
			
	МассивСвойств = СтрРазделить(ИмяСвойства, ".");	
	
	Если МассивСвойств.Количество()=1 Тогда		
		Возврат Результат;
	КонецЕсли;
	
	
	Для Ном=0 По МассивСвойств.Количество()-2 Цикл				
		Результат.Вставить("Коллекция",	ПолучитьЗначениеКоллекцииБезВложенности(Результат.Коллекция, СокрЛП(МассивСвойств[Ном]), ЗначениеПоУмолчанию));
	КонецЦикла;		
	
	Результат.Вставить("ИмяСвойства",	СокрЛП(МассивСвойств[Ном])); 
		
	Возврат Результат;

КонецФункции	

&НаКлиенте
Функция ПолучитьЗначениеКоллекции(Знач Коллекция, Знач ИмяСвойства, ЗначениеПоУмолчанию=Неопределено, МягкийРежим=Истина) экспорт
	
	Если (ТипЗнч(Коллекция)=Тип("Число") ИЛИ ТипЗнч(Коллекция)=Тип("Строка") ИЛИ ТипЗнч(Коллекция)=Тип("Булево") ИЛИ ТипЗнч(Коллекция)=Тип("Дата")) Тогда
		
		Если МягкийРежим И ЗначениеЗаполнено(Коллекция) Тогда
			Возврат Коллекция;	
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;	
		
	КонецЕсли;
	
	Результат = ПолучитьКоллекциюПоСвойству(Коллекция, ИмяСвойства, ЗначениеПоУмолчанию);
	
	Возврат ПолучитьЗначениеКоллекцииБезВложенности(Результат.Коллекция, Результат.ИмяСвойства, ЗначениеПоУмолчанию);
		
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
//  Истина - значение не заполнено, ложь - иначе.
//
Функция ЗначениеНеЗаполнено(Значение, БулевоЛожьЗаполнено=Истина) Экспорт
	
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		
		Результат = Истина;
		
	ИначеЕсли Значение = NULL Тогда
		
		Результат = Истина;
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Если СокрЛП(Значение) = "" Тогда
			Результат = Истина;
		КонецЕсли; 
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		
		Если Значение = 0 Тогда
			Результат = Истина;
		КонецЕсли; 
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Если Значение = Дата('00010101') Тогда
			Результат = Истина;
		КонецЕсли; 
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Если Значение=Истина Тогда
			Возврат Ложь;
		Иначе	
			Результат = НЕ БулевоЛожьЗаполнено; // Булево будем считать не пустым
		КонецЕсли;
		
	ИначеЕсли (ТипЗначения = Тип("Соответствие") ИЛИ ТипЗначения = Тип("Структура") ИЛИ ТипЗначения = Тип("Массив")) И Значение.Количество()=0 Тогда	
		
		Результат = Истина; 
	// Для остальных будем считать значение пустым, если оно равно
	// дефолтному значению своего типа
	Иначе
		
		Попытка
			
			Если Значение = Новый(ТипЗначения) Тогда
				Результат = Истина;
			КонецЕсли; 
			
		Исключение
		КонецПопытки;
		
	КонецЕсли; 

	Возврат Результат;
КонецФункции // ЗначениеНеЗаполнено()      

#КонецОбласти

