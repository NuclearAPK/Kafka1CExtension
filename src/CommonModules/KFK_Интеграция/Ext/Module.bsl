#Область ПрограммныйИнтерфейс

Функция ИдентификаторВнешнейКомпоненты() Экспорт
	
	Идентификатор = Константы.KFK_ИдентификаторКомпоненты.Получить();
	Идентификатор = ?(ЗначениеЗаполнено(Идентификатор), Идентификатор, "Integration");
	
	Возврат Идентификатор;
	
КонецФункции

Функция ТаймаутОжиданияПоУмолчанию() Экспорт
	
	ТаймаутОжидания = Константы.KFK_ТаймаутОжиданияПоУмолчанию.Получить();
	ТаймаутОжидания = ?(ТаймаутОжидания = 0, 500, ТаймаутОжидания);
	
	Возврат ТаймаутОжидания;
	
КонецФункции

Функция ИмяСобытияКонсьюмер() Экспорт
	
	ИмяСобытия = Константы.KFK_ИмяСобытияКонсьюмер.Получить();
	ИмяСобытия = ?(ЗначениеЗаполнено(ИмяСобытия), ИмяСобытия, "Интеграция Kafka. Consumer");
	
	Возврат ИмяСобытия;
	
КонецФункции

Функция ИмяСобытияПродюсер() Экспорт    
	
	ИмяСобытия = Константы.KFK_ИмяСобытияПродюсер.Получить();
	ИмяСобытия = ?(ЗначениеЗаполнено(ИмяСобытия), ИмяСобытия, "Интеграция Kafka. Producer");
	
	Возврат ИмяСобытия;
	
КонецФункции

// Функция - Подключить компоненту кафка
//
// Параметры:
//  ИмяКомпоненты	 - Строка	 - Идентификатор подключаемой компоненты
//  ТипПодключения	 - ТипПодключенияВнешнейКомпоненты	 - Изолированно, НеИзолированно
//
// Возвращаемое значение:
//  Компонента - Экземпляр внешней компоненты. В случае ошибок при подключении будет вызвано исключение
//
Функция ПодключитьКомпонентуКафка(ИмяКомпоненты, ТипПодключения = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяКомпоненты) Тогда
		Возврат "Не задано имя компоненты! Компонента <Simple Kafka 1C> не подключена!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипПодключения) Тогда
		ТипПодключения = ТипПодключенияВнешнейКомпоненты.Изолированно;
	КонецЕсли;
	
	Компонента = Неопределено;
	
	Попытка
		Подключено = ПодключитьВнешнююКомпоненту("ОбщийМакет.KFK_Компонента", ИмяКомпоненты, ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
	Исключение
		ВремКаталог = КаталогВременныхФайлов();
		ВременныйПуть = СтрШаблон("%1SimpleKafka", ВремКаталог);
		
		КаталогНаДиске = Новый Файл(ВременныйПуть);
		
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ВременныйПуть);
		КонецЕсли;
		
		ДвоичныеДанные_Kafka = ПолучитьОбщийМакет("KFK_Компонента");
		
		// tar.
		ИмяФайла = ПолучитьИмяВременногоФайла("tar.gz");
		ФайлАрхива = Новый Файл(ИмяФайла);
		
		Если ФайлАрхива.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		ДвоичныеДанные_Kafka.Записать(ИмяФайла);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bat");
		
		// Создаём батник
		Т = Новый ТекстовыйДокумент;
		Т.ДобавитьСтроку("tar -xvzf " + ИмяФайла + " -C " + ВременныйПуть);
		Т.Записать(ИмяВременногоФайла);
		
		ЗапуститьПриложение(ИмяВременногоФайла, , Истина);
		
		// Важно удалить файлы батника
		УдалитьФайлы(ИмяВременногоФайла);
		
		ПолноеИмяФайла = СтрШаблон("%1\SimpleKafka1C64.dll", ВременныйПуть);
		Подключено = ПодключитьВнешнююКомпоненту(ПолноеИмяФайла, ИмяКомпоненты,
				ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.Изолированно);
	КонецПопытки;
	
	Попытка
		Если Подключено Тогда
			Компонента = Новый(СтрШаблон("AddIn.%1.simpleKafka1C", ИмяКомпоненты));
		КонецЕсли;
	Исключение
		ВызватьИсключение "Компонента <Simple Kafka 1C> не подключена!";
	КонецПопытки;
	
	Возврат Компонента;
	
КонецФункции

Процедура ЗаданиеМониторингаКонсьюмеров() Экспорт
	
	Консьюмеры = Справочники.KFK_Консьюмеры.АктивныеКонсьюмеры();
	
	Для каждого ДанныеКонсьюмера Из Консьюмеры Цикл
		
		Задание = ДанныеКонсьюмера.РасписаниеЗадания.Получить();   
		
		Если Задание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Задание.ТребуетсяВыполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		КлючФоновогоЗадания = СтрШаблон("СлушатьСообщения_%1", ДанныеКонсьюмера.ИдентификаторГруппы);
		
		ОтборЗаданий = Новый Структура;
		ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ОтборЗаданий.Вставить("Ключ", КлючФоновогоЗадания);
		
		ЗапущенныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
		
		ФоновоеЗаданиеЗапущено = (ЗапущенныеФоновыеЗадания.Количество() = 1);
		
		Если НЕ ФоновоеЗаданиеЗапущено Тогда
			
			Параметры = KFK_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеКонсьюмера);
			ФоновыеЗадания.Выполнить("KFK_Интеграция.СлушатьСообщения", Параметры, КлючФоновогоЗадания,
				СтрШаблон("Consumer Kafka [%1]", ДанныеКонсьюмера.ИдентификаторГруппы));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеТопиковБрокера(АдресБрокера, ДополнительныеПараметры = Неопределено) Экспорт  
	
	ТопикиБрокера = Новый ТаблицаЗначений;
	ТопикиБрокера.Колонки.Добавить("Топик", KFK_ОбщегоНазначения.ОписаниеТипаСтрока(128));
	ТопикиБрокера.Колонки.Добавить("КоличествоПартиций", KFK_ОбщегоНазначения.ОписаниеТипаЧисло(3));    
	
	Если НЕ ЗначениеЗаполнено(АдресБрокера) Тогда
		Возврат ТопикиБрокера;
	КонецЕсли;
	
	ИдентификаторВК = KFK_ИнтеграцияПовтИсп.ИдентификаторВнешнейКомпоненты();
	Компонента = ПодключитьКомпонентуКафка(ИдентификаторВК, ТипПодключенияВнешнейКомпоненты.Изолированно);
		
	// установим параметры 
	Если ДополнительныеПараметры <> Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И 
		ДополнительныеПараметры.Свойство("ПараметрыПодключения") Тогда
		
		Для каждого Параметр Из ДополнительныеПараметры.ПараметрыПодключения Цикл
			Компонента.УстановитьПараметр(СокрЛП(Параметр.Ключ), СокрЛП(Параметр.Значение));	
		КонецЦикла;
	КонецЕсли;
	
	// обращаемся к методу компоненты
	СписокТопиков = Компонента.ПолучитьСписокТопиков(АдресБрокера);
	
	Если НЕ ЗначениеЗаполнено(СписокТопиков) Тогда   
		KFK_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Невозможно получить список топиков: %1", Компонента.ПолучитьСообщениеОбОшибке()));
		Возврат ТопикиБрокера;	
	КонецЕсли;         
	
	ТопикиБрокера.Очистить();
	Данные = KFK_ОбщегоНазначения.JSONВЗначение(СписокТопиков,, Ложь); 
	
	ИсключаемыеТопики = НедоступныеТопики();
	
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("topics") И ТипЗнч(Данные.topics) = Тип("Массив") Тогда
		Для каждого Топик Из Данные.topics Цикл
			Если Топик.Свойство("topic") Тогда       
				Если ИсключаемыеТопики.Найти(Топик.topic) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ТопикБрокера = ТопикиБрокера.Добавить();
				ТопикБрокера.Топик = Топик.topic;     
				ТопикБрокера.КоличествоПартиций = Топик.partitions;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;              
	
	ТопикиБрокера.Сортировать("Топик");
	Компонента = Неопределено;      
	
	Возврат ТопикиБрокера;
	
КонецФункции

Функция ЗаполнитьСписокВыбораТопиков(Брокер) Экспорт 
	
	СписокВыбора = Новый СписокЗначений;
	
	ИдентификаторВК = KFK_ИнтеграцияПовтИсп.ИдентификаторВнешнейКомпоненты();
	Компонента = ПодключитьКомпонентуКафка(ИдентификаторВК, ТипПодключенияВнешнейКомпоненты.Изолированно);	
	
	Для каждого Параметр Из Брокер.ПараметрыПодключения Цикл
		Компонента.УстановитьПараметр(СокрЛП(Параметр.Ключ), СокрЛП(Параметр.Значение));	
	КонецЦикла;

	СписокТопиков = Компонента.ПолучитьСписокТопиков(Брокер.АдресБрокера);

	Если НЕ ЗначениеЗаполнено(СписокТопиков) Тогда   
		KFK_ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Невозможно получить список топиков: %1", Компонента.ПолучитьСообщениеОбОшибке()));
		Возврат СписокВыбора;	
	КонецЕсли;         
		
	СписокВыбора.Очистить();
	Данные = KFK_ОбщегоНазначения.JSONВЗначение(СписокТопиков,, Ложь);  
	
	ИсключаемыеТопики = НедоступныеТопики();
	
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("topics") И ТипЗнч(Данные.topics) = Тип("Массив") Тогда
		Для каждого Топик Из Данные.topics Цикл
			Если Топик.Свойство("topic") Тогда       
				Если ИсключаемыеТопики.Найти(Топик.topic) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;           
				
				СписокВыбора.Добавить(Топик.topic);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;              
	
	СписокВыбора.СортироватьПоЗначению();	
	Компонента = Неопределено;  
	
	Возврат СписокВыбора;
	
КонецФункции

#Область ПолучениеСообщений

Процедура СлушатьСообщения(ДанныеКонсьюмера) Экспорт
	
	ИдентификаторВК = KFK_ИнтеграцияПовтИсп.ИдентификаторВнешнейКомпоненты();
	Компонента = KFK_Интеграция.ПодключитьКомпонентуКафка(ИдентификаторВК, ТипПодключенияВнешнейКомпоненты.Изолированно);
	
	Если Компонента = Неопределено Тогда
		ВызватьИсключение "Ошибка подключения внешней компоненты при получении сообщений";
	КонецЕсли;
	
	МассивБрокеров      = Новый Массив;
	МассивТопиков       = Новый Массив;
	СоответствиеТопиков = Новый Соответствие;
	
	СписокТопиков = СтрСоединить(ДанныеКонсьюмера.Топики, ",");
	
	// получаем параметры задания
	ВремяНачалаЗадания = Дата(1, 1, 1);
	ВремяОкончанияЗадания = Дата(1, 1, 1);
	Задание = ДанныеКонсьюмера.РасписаниеЗадания.Получить();
	Если Задание <> Неопределено Тогда
		ВремяНачалаЗадания = Задание.ВремяНачала;
		ВремяОкончанияЗадания = Задание.ВремяКонца;
	КонецЕсли;
	
	ВремяРаботы = (ВремяОкончанияЗадания - ВремяНачалаЗадания);
	ВремяНачала = ТекущаяДатаСеанса();
	
	ИмяСобытияЖурналаРегистрации = KFK_ИнтеграцияПовтИсп.ИмяСобытияКонсьюмер();
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , ,
		СтрШаблон("Старт подписки на топики %1", СписокТопиков));
	
	// установка основных параметров консьюмера
	АвтофиксацияСмещенийВключена = Истина;
	
	Для каждого Параметр_ Из ДанныеКонсьюмера.Параметры Цикл
		Компонента.УстановитьПараметр(Строка(Параметр_.Ключ), Строка(Параметр_.Значение));
		Если нрег(Параметр_.Ключ) = "enable.auto.commit" И
			нрег(Параметр_.Значение) = "false" Тогда
			АвтофиксацияСмещенийВключена = Ложь;
		КонецЕсли;
	КонецЦикла;                        
	
	Компонента.УстановитьПараметр("group.id", Строка(ДанныеКонсьюмера.ИдентификаторГруппы));	
	Компонента.КаталогЛогов = ДанныеКонсьюмера.КаталогЛогов;        
	
	// получаем смещения текущего консьюмера                                                
	СмещенияЗафиксированныеВБрокереJSON = Компонента.ПолучитьСмещенияГруппыКонсьюмеров(ДанныеКонсьюмера.АдресБрокера);   
	Если ЗначениеЗаполнено(СмещенияЗафиксированныеВБрокереJSON) Тогда          
		
		СмещенияЗафиксированныеВБрокере = KFK_ОбщегоНазначения.JSONВЗначение(СмещенияЗафиксированныеВБрокереJSON,, Ложь); 
		
		Если ТипЗнч(СмещенияЗафиксированныеВБрокере) = Тип("Структура") И СмещенияЗафиксированныеВБрокере.Свойство("metadata") И
			ТипЗнч(СмещенияЗафиксированныеВБрокере.metadata) = Тип("Массив") Тогда
			
			СтруктураМетаданныхДляУстановкиСмещений = Новый Структура("metadata", Новый Массив);
			ТекущиеСмещенияЗафиксированныеВУчетнойСистеме = СмещенияЗафиксированныеВУчетнойСистеме(ДанныеКонсьюмера.Ссылка);			
			
			Для каждого СтрокаМетаданных Из СмещенияЗафиксированныеВБрокере.metadata Цикл      
				
				Раздел = Число(СтрЗаменить(СтрокаМетаданных.partition, Символы.НПП, "")); 
				СмещениеВБрокере = Число(СтрЗаменить(СтрокаМетаданных.offset, Символы.НПП, ""));
				
				Отбор = Новый Структура("Топик, Раздел", СтрокаМетаданных.topic, Раздел);
				
				Если СмещениеВБрокере < 0 Тогда
					Продолжить; // ничего делать не нужно	
				КонецЕсли;
				
				НайденныеСтроки = ТекущиеСмещенияЗафиксированныеВУчетнойСистеме.НайтиСтроки(Отбор); 
				
				Если НайденныеСтроки.Количество() И НайденныеСтроки[0].Смещение < СмещениеВБрокере Тогда 
					СтруктураМетаданныхДляУстановкиСмещений["metadata"].Добавить(
						Новый Структура("topic, partition, offset", СтрокаМетаданных.topic, Раздел, НайденныеСтроки[0].Смещение));        
				ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда    
					СтруктураМетаданныхДляУстановкиСмещений["metadata"].Добавить(
						Новый Структура("topic, partition, offset", СтрокаМетаданных.topic, Раздел, 0));  		
				КонецЕсли;  
				
			КонецЦикла;			       
			
			Если СтруктураМетаданныхДляУстановкиСмещений["metadata"].Количество() Тогда
				СтрокаJSON = KFK_ОбщегоНазначения.ЗначениеВJSON(СтруктураМетаданныхДляУстановкиСмещений);
				Компонента.УстановитьПозицииЧтения(СтрокаJSON);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
		
	РезультатИнициализации = Компонента.ИнициализироватьКонсьюмера(ДанныеКонсьюмера.АдресБрокера);
	Если НЕ РезультатИнициализации Тогда
		ОписаниеОшибки = Компонента.ПолучитьСообщениеОбОшибке();
		Компонента = Неопределено;
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;        
	
	РезультатПодписки = Компонента.Подписаться(СписокТопиков);
	Если НЕ РезультатПодписки Тогда
		ОписаниеОшибки = Компонента.ПолучитьСообщениеОбОшибке();
		Компонента = Неопределено;
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;    	
	
	// установка таймаута для ожидания сообщений
	Компонента.УстановитьТаймаутОжидания(ДанныеКонсьюмера.ТаймаутОжидания);
	РазрешеноСлушать = Истина;
	
	Пока РазрешеноСлушать Цикл
				
		РезультатЧтения = Компонента.ПрочитатьСообщение();
		
		Если НЕ РезультатЧтения Тогда       
			
			РазрешеноСлушать = KFK_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонсьюмера.Ссылка, "Активен");
		
			Если (ВремяРаботы > 0 И ТекущаяДатаСеанса() > ВремяНачала + ВремяРаботы) ИЛИ
				(ЗначениеЗаполнено(ВремяОкончанияЗадания) И ЗначениеЗаполнено(ВремяНачалаЗадания) И
					ТекущаяДатаСеанса() > НачалоДня(ТекущаяДатаСеанса()) + (ВремяОкончанияЗадания - Дата(1, 1, 1)) И
					ТекущаяДатаСеанса() < НачалоДня(ТекущаяДатаСеанса()) + (ВремяНачалаЗадания - Дата(1, 1, 1))) Тогда
				
				РазрешеноСлушать = Ложь;
			КонецЕсли;   
			
			Если Не РазрешеноСлушать Тогда
				Прервать; 
			Иначе
				Продолжить;
			КонецЕсли;

		КонецЕсли;
		
		ДанныеСообщения = Компонента.ПолучитьДанныеСообщения(ДанныеКонсьюмера.ПолучатьСообщенияДвоичнымиДанными);
		КлючСообщения = Компонента.ПолучитьКлючСообщения();   
		ТопикСтрокой = Компонента.ПолучитьТопикСообщения();
		ЗаголовкиСообщения = Компонента.ПолучитьЗаголовкиСообщения();
		ИдентификаторБрокераСообщения = Компонента.ПолучитьИдентификаторБрокераСообщения();   
		ВременнаяМеткаСообщения = Компонента.ПолучитьВременнуюМеткуСообщения(); 
		СмещениеСообщения = Компонента.ПолучитьСмещениеСообщения();  
		РазделСообщения = Компонента.ПолучитьРазделСообщения();
				
		Запись = РегистрыСведений.KFK_ПрочитанныеСообщения.СоздатьМенеджерЗаписи();  
		Запись.Консьюмер = ДанныеКонсьюмера.Ссылка;
		Запись.Топик = ТопикСтрокой;
		Запись.Ключ = КлючСообщения;     
		Запись.Сообщение = Новый ХранилищеЗначения(ДанныеСообщения);
        Запись.Заголовки = Новый ХранилищеЗначения(ЗаголовкиСообщения);
		Запись.Раздел = РазделСообщения;
		Запись.Смещение = СмещениеСообщения;
		Запись.ВременнаяМетка = ВременнаяМеткаСообщения;
		Запись.ИдентификаторБрокера = ИдентификаторБрокераСообщения;
		Запись.Статус = Перечисления.KFK_СтатусыСообщений.Загружено;
		Запись.ДатаЗаписиВБрокере = МестноеВремя(KFK_ОбщегоНазначенияКлиентСервер.TimestampВДату(ВременнаяМеткаСообщения), ЧасовойПоясСеанса());
		Запись.ДатаПолученияСообщения = ТекущаяДатаСеанса();		
		Запись.Записать();   
		
		// +++ подключаемый/переопределяемый метод в рамках мастер-класса
		KFK_ИнтеграцияПереопределяемый.ОбработатьВходящееСообщение(ДанныеСообщения);
		// ---
		
		НовоеСмещение = Число(СмещениеСообщения) + 1;
		
		Если НЕ АвтофиксацияСмещенийВключена Тогда
			Компонента.ЗафиксироватьСмещение(ТопикСтрокой, НовоеСмещение, Число(РазделСообщения));
		КонецЕсли;                   
		
		ЗаписьСмещения = РегистрыСведений.KFK_СмещенияКонсьюмеров.СоздатьМенеджерЗаписи();
		ЗаписьСмещения.Консьюмер = ДанныеКонсьюмера.Ссылка;
		ЗаписьСмещения.Топик = ТопикСтрокой;
		ЗаписьСмещения.Раздел = Число(РазделСообщения);
		ЗаписьСмещения.Смещение = НовоеСмещение;
		ЗаписьСмещения.Записать();
		
	КонецЦикла;
	
	Компонента.ОстановитьКонсьюмера();
	Компонента = Неопределено;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Информация, , , СтрШаблон("Остановка подписки на топики %1", СписокТопиков));
	
КонецПроцедуры

#КонецОбласти //ПолучениеСообщений    

#Область ОтправкаСообщений

Процедура Опубликовать(Продюсер = Неопределено, Данные, ПараметрыПубликации = Неопределено) Экспорт  
	
	Ключ = "";
	Заголовки = "";  
	Партиция = ?(ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Партиция"), ПараметрыПубликации.Партиция, 0);
	КоличествоСообщений = 1;  
	
	Если ПараметрыПубликации.Свойство("КоличествоСообщений") И ТипЗнч(ПараметрыПубликации.КоличествоСообщений) = Тип("Число") Тогда
		КоличествоСообщений = ПараметрыПубликации.КоличествоСообщений;	
	КонецЕсли;
	
	ИдентификаторВК = KFK_ИнтеграцияПовтИсп.ИдентификаторВнешнейКомпоненты();
	Компонента = KFK_Интеграция.ПодключитьКомпонентуКафка(ИдентификаторВК, ТипПодключенияВнешнейКомпоненты.Изолированно);
	
	Если Компонента = Неопределено Тогда
		ВызватьИсключение "Ошибка подключения внешней компоненты при отправке сообщения";	
	КонецЕсли;
	
	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Сообщения = KFK_ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные);
	Иначе
		Сообщения = Данные;
	КонецЕсли;
	
	Для каждого Параметр Из ПараметрыПубликации.Параметры Цикл
		Компонента.УстановитьПараметр(Строка(Параметр.Ключ), Строка(Параметр.Значение));		
	КонецЦикла;                                                                                                              
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("КаталогЛогов") Тогда
		Компонента.КаталогЛогов = ПараметрыПубликации.КаталогЛогов; 
	Иначе
		Компонента.КаталогЛогов = Продюсер.КаталогЛогов;
	КонецЕсли;     
	
	Топики = Новый Массив; 
	Брокеры = Новый Массив;
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Топики") Тогда  
		Топики = ПараметрыПубликации.Топики;
	Иначе
		Для каждого СтрокаТопика Из Продюсер.Топики Цикл  
			
			Если Брокеры.Найти(СтрокаТопика.Брокер) = Неопределено Тогда
				Брокеры.Добавить(СтрокаТопика.Брокер);	
			КонецЕсли;                      
			
			НаименованиеТопика = СтрокаТопика.Топик;  
			
			Если Топики.Найти(НаименованиеТопика) = Неопределено Тогда
				Топики.Добавить(НаименованиеТопика);	
			КонецЕсли;        
			
		КонецЦикла;
	КонецЕсли;                
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Брокеры") Тогда
		Брокеры = ПараметрыПубликации.Брокеры;	
	КонецЕсли;                 
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Синхронно") Тогда
		Синхронно = ПараметрыПубликации.Синхронно; 	
	Иначе
		Синхронно = Продюсер.Синхронно;
	КонецЕсли;          
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Ключ") Тогда  
		Ключ = ПараметрыПубликации.Ключ;		
	КонецЕсли;      
	
	Если ТипЗнч(ПараметрыПубликации) = Тип("Структура") И ПараметрыПубликации.Свойство("Заголовки") Тогда  
		Заголовки = ПараметрыПубликации.Заголовки;		
	КонецЕсли;	                      
	
	// брокеры должны содержать идентичные настройки, иначе, может произойти объединение настроек
	МассивАдресовБрокеров = Новый Массив;       
	СоответствиеПараметровБрокеров = Новый Соответствие;
	
	Для каждого Брокер Из Брокеры Цикл
		МассивАдресовБрокеров.Добавить(Брокер.АдресБрокера);	
		
		// если дублируются параметры, то соответствие решает эту проблему, записывая последнюю настройку
		Для каждого Параметр Из Брокер.ПараметрыПодключения Цикл
			СоответствиеПараметровБрокеров.Вставить(СокрЛП(Параметр.Ключ), СокрЛП(Параметр.Значение));	
		КонецЦикла;
	КонецЦикла;      
	
	// дополним параметры продюсера - параметрами брокеров
	Для каждого Параметр Из СоответствиеПараметровБрокеров Цикл
		Компонента.УстановитьПараметр(Строка(Параметр.Ключ), Строка(Параметр.Значение));		
	КонецЦикла;       
	
	// параметры для синхронной отправки
	Если Синхронно И НЕ ЗначениеЗаполнено(Продюсер) Тогда
		ПараметрыСинхроннойОтправки = KFK_Интеграция.ПолучитьПараметрыСинхроннойОтправки();
		Для каждого Параметр Из ПараметрыСинхроннойОтправки Цикл
			Компонента.УстановитьПараметр(Строка(Параметр.Ключ), Строка(Параметр.Значение));	
		КонецЦикла;
	КонецЕсли;        
	
	// avro
	ИспользоватьСхемы = ПараметрыПубликации.Свойство("СхемаAVRO");

	// инициализация и отправка сообщений
	РезультатИнициализации = Компонента.ИнициализироватьПродюсера(СтрСоединить(МассивАдресовБрокеров, ","));
	
	Если РезультатИнициализации Тогда     
		
		Если ИспользоватьСхемы Тогда
			РезультатСохранения = Компонента.СохранитьСхемуAVRO(ПараметрыПубликации.СхемаAVRO.ИмяСхемы, ПараметрыПубликации.СхемаAVRO.Схема);
			
			Если Не РезультатСохранения Тогда
				ВызватьИсключение Компонента.ПолучитьСообщениеОбОшибке();
			КонецЕсли;	
		КонецЕсли;
		
		Для каждого Топик Из Топики Цикл
			Для каждого СообщениеВКафку Из Сообщения Цикл			     
				Если ТипЗнч(СообщениеВКафку) = Тип("Структура") Тогда 
					ДанныеСообщения = "";
					Если СообщениеВКафку.Свойство("Данные") Тогда 
						ДанныеСообщения = СообщениеВКафку.Данные;
					КонецЕсли;    
					
					Если СообщениеВКафку.Свойство("Ключ") Тогда
						Ключ = СообщениеВКафку.Ключ;	
					КонецЕсли;   
					
					Если СообщениеВКафку.Свойство("Заголовки") Тогда
						Заголовки = СообщениеВКафку.Заголовки;	
					КонецЕсли;					
				Иначе
					ДанныеСообщения = СообщениеВКафку; 
				КонецЕсли;          
				
				Если ИспользоватьСхемы Тогда
					РезультатПреобразования = Компонента.ПреобразоватьВФорматAVRO(ДанныеСообщения, ПараметрыПубликации.СхемаAVRO.ИмяСхемы); 
					Если НЕ РезультатПреобразования Тогда
						ВызватьИсключение Компонента.ПолучитьСообщениеОбОшибке();
					КонецЕсли;
				КонецЕсли;
				
				Для т = 1 по КоличествоСообщений Цикл
					// (1 - Сообщение, 2 - Название топика, 3 - Партиция, 4 - Ключ, 5 - Заголовки)  
					Если Синхронно Тогда             
						Если ИспользоватьСхемы Тогда
							РезультатОтправки = Компонента.ОтправитьСообщениеAVROСОжиданиемРезультата(Топик, Партиция, Ключ, Заголовки);
						Иначе
							РезультатОтправки = Компонента.ОтправитьСообщениеСОжиданиемРезультата(ДанныеСообщения, Топик, Партиция, Ключ, Заголовки);  
						КонецЕсли;
						
						Если НЕ РезультатОтправки Тогда   
							Если Компонента <> Неопределено Тогда             
								ТекстОшибки = Компонента.ПолучитьСообщениеОбОшибке();
								ИмяСобытия = KFK_ИнтеграцияПовтИсп.ИмяСобытияПродюсер();
								ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
								Компонента.ОстановитьПродюсера(); 
								Компонента = Неопределено;      
								
								ВызватьИсключение ТекстОшибки;
							КонецЕсли;					
						КонецЕсли;
					Иначе 
						Если ИспользоватьСхемы Тогда
							Компонента.ОтправитьСообщениеAVRO(Топик, Партиция, Ключ, Заголовки); 	
						Иначе
							Компонента.ОтправитьСообщение(ДанныеСообщения, Топик, Партиция, Ключ, Заголовки); 
						КонецЕсли;
					КонецЕсли;   
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;  
		
		Компонента.ОстановитьПродюсера();
		
	Иначе       
		ТекстОшибки = "";  
		
		Если Компонента <> Неопределено Тогда
			ТекстОшибки = Компонента.ПолучитьСообщениеОбОшибке();	
		КонецЕсли;
		
		ВызватьИсключение "Не удалось инициализировать продюсера! " + ТекстОшибки;
	КонецЕсли;
		
	Компонента = Неопределено;
	
КонецПроцедуры   

Функция ПолучитьПараметрыСинхроннойОтправки() Экспорт
	
	Параметры = Новый Соответствие;
	Параметры.Вставить("queue.buffering.max.ms", "1");
	Параметры.Вставить("socket.blocking.max.ms", "1");  
	Параметры.Вставить("message.timeout.ms", "5000"); // с этим параметром поакуратнее	
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти //ОтправкаСообщений     

#КонецОбласти //ПрограммныйИнтерфейс  

#Область СлужебныйПрограммныйИнтерфейс

Функция НедоступныеТопики() 
	
	Результат = Новый Массив; 
	Результат.Добавить("__schema_registry");
	Результат.Добавить("__consumer_offsets");
	
	Возврат Результат;
	
КонецФункции

Функция СмещенияЗафиксированныеВУчетнойСистеме(Консьюмер) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	KFK_СмещенияКонсьюмеров.Топик КАК Топик,
		|	KFK_СмещенияКонсьюмеров.Раздел КАК Раздел,
		|	KFK_СмещенияКонсьюмеров.Смещение КАК Смещение
		|ИЗ
		|	РегистрСведений.KFK_СмещенияКонсьюмеров КАК KFK_СмещенияКонсьюмеров
		|ГДЕ
		|	KFK_СмещенияКонсьюмеров.Консьюмер = &Консьюмер"; 
	
	Запрос.УстановитьПараметр("Консьюмер", Консьюмер); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти